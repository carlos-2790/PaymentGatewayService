# OPCIÓN 1: Usar una imagen más estable
FROM maven:3.9-openjdk-21-slim AS builder

WORKDIR /app

# Copiar archivos de configuración primero para aprovechar el cache de Docker
COPY pom.xml .
COPY package.json .

# Descargar dependencias (se cachea si no cambian los archivos de configuración)
RUN mvn dependency:go-offline -B

# Copiar código fuente
COPY src ./src

# Compilar y empaquetar la aplicación
RUN mvn clean package -DskipTests -B

# Etapa 2: Runtime
FROM openjdk:21-jdk-slim

# Crear usuario no-root para seguridad
RUN groupadd -r paymentgateway && useradd -r -g paymentgateway paymentgateway

# Instalar herramientas necesarias
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Crear directorios necesarios
RUN mkdir -p /app/logs && \
    chown -R paymentgateway:paymentgateway /app

WORKDIR /app

# Copiar el JAR desde la etapa de build
COPY --from=builder /app/target/payment-gateway-service-*.jar app.jar

# Cambiar al usuario no-root
USER paymentgateway

# Configurar JVM para contenedores
ENV JAVA_OPTS="-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -Djava.security.egd=file:/dev/./urandom"

# Exponer puerto
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Comando de inicio
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]

# ============================================
# OPCIÓN 2: Si prefieres usar Eclipse Temurin (más estable)
# FROM eclipse-temurin:21-jdk AS builder
# 
# # Instalar Maven manualmente
# RUN apt-get update && apt-get install -y maven && rm -rf /var/lib/apt/lists/*
# 
# WORKDIR /app
# COPY pom.xml .
# RUN mvn dependency:go-offline -B
# COPY src ./src
# RUN mvn clean package -DskipTests -B
# 
# FROM eclipse-temurin:21-jre-jammy
# WORKDIR /app
# COPY --from=builder /app/target/payment-gateway-service-*.jar app.jar
# EXPOSE 8080
# ENTRYPOINT ["java", "-jar", "app.jar"] 