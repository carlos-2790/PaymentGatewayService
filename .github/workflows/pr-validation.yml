name: PR Validation - Payment Gateway Service

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

env:
  JAVA_VERSION: '21'

jobs:
  # 🔍 Validación de PR
  validate-pr:
    name: 🔍 Validar Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Configurar JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache dependencias Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🧪 Ejecutar tests unitarios
      run: mvn clean test -B
      
    - name: 🏗️ Verificar compilación
      run: mvn clean compile -B
      
    - name: 📊 Comentar resultados en PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🤖 Validación automática de PR')
          );
          
          const body = `🤖 **Validación automática de PR**
          
          ✅ **Tests unitarios**: Ejecutados correctamente
          ✅ **Compilación**: Sin errores
          ✅ **Estructura**: Validada
          
          🎉 **Tu PR está listo para ser revisado!**
          
          ---
          *Validación ejecutada en: ${new Date().toISOString()}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }