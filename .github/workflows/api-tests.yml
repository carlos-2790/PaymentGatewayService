name: 🧪 API Tests E2E

on:
  pull_request:
    branches: [ develop, main ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ develop, main ]
  workflow_call:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: false
        default: 'test'
        type: string

# Permisos necesarios
permissions:
  contents: read
  issues: write
  pull-requests: write
  checks: write

env:
  JAVA_VERSION: '21'
  NODE_VERSION: '20'

jobs:
  api-tests:
    name: 🚀 API Tests E2E
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: payment_gateway_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🟢 Configurar Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
    
    - name: 📦 Instalar dependencias Node.js
      run: npm ci
    
    - name: 🎭 Instalar Playwright browsers
      run: npx playwright install --with-deps
    
    - name: 🔧 Compilar aplicación Spring Boot
      run: mvn clean compile -DskipTests
    
    - name: 🚀 Iniciar aplicación Spring Boot
      run: |
        mvn spring-boot:run \
          -Dspring-boot.run.jvmArguments="-Dspring.profiles.active=ci" &
        echo $! > app.pid
        
        # Esperar a que la aplicación esté lista
        timeout 120s bash -c 'until curl -f http://localhost:8080/actuator/health; do sleep 2; done'
        echo "✅ Aplicación iniciada correctamente"
    
    - name: 🧪 Ejecutar tests E2E de API
      run: npx playwright test tests/api/ --reporter=html,line
      env:
        API_BASE_URL: http://localhost:8080
        CI: true
    
    - name: 🛑 Detener aplicación Spring Boot
      if: always()
      run: |
        if [ -f app.pid ]; then
          kill $(cat app.pid) || true
          rm app.pid
        fi
    
    - name: 📊 Subir reporte de Playwright
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ github.run_id }}
        path: playwright-report/
        retention-days: 7
    
    - name: 📝 Subir videos de tests fallidos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-videos-${{ github.run_id }}
        path: test-results/
        retention-days: 7
    
    - name: 💬 Comentar resultados en PR
      uses: actions/github-script@v7
      if: always() && github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Leer resultados de Playwright si existen
          let testResults = '';
          try {
            const reportPath = 'playwright-report/index.html';
            if (fs.existsSync(reportPath)) {
              testResults = '📊 Reporte HTML de Playwright generado';
            }
          } catch (error) {
            testResults = '❌ No se pudo generar el reporte';
          }
          
          const success = '${{ job.status }}' === 'success';
          const emoji = success ? '✅' : '❌';
          const status = success ? 'EXITOSOS' : 'FALLIDOS';
          
          const body = `## 🧪 Tests E2E de API - ${status}
          
          ${emoji} **Estado**: ${status}
          📋 **Tipo**: Tests End-to-End de API
          🎯 **Cobertura**: 
          - ✅ Validación de entrada
          - ✅ Manejo de errores
          - ✅ Respuestas HTTP correctas
          - ✅ Integración completa
          
          ### 📊 Resultados:
          ${testResults}
          
          ${success ? 
            '🎉 **¡Todos los tests de API pasaron correctamente!**' : 
            '🚨 **Algunos tests fallaron. Revisa los logs y artefactos.**'
          }
          
          ### 📁 Artefactos disponibles:
          - 📊 Reporte HTML de Playwright
          ${success ? '' : '- 🎥 Videos de tests fallidos'}
          
          ---
          🤖 *Tests ejecutados automáticamente en CI/CD*`;
          
          // Buscar comentario existente
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🧪 Tests E2E de API')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  # Job para validar que los tests son necesarios según los cambios
  check-changes:
    name: 🔍 Verificar cambios relevantes
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.api-relevant }}
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Detectar cambios relevantes para API
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          api-relevant:
            - 'src/main/java/**'
            - 'src/main/resources/**'
            - 'tests/api/**'
            - 'pom.xml'
            - 'package.json'
            - 'playwright.config.ts'
            - '.github/workflows/api-tests.yml'

  # Job condicional que solo se ejecuta si hay cambios relevantes
  conditional-api-tests:
    name: 🎯 Tests E2E (Condicional)
    needs: [check-changes, api-tests]
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.should-run-tests == 'true'
    
    steps:
    - name: ✅ Tests ejecutados
      run: echo "Tests E2E ejecutados debido a cambios relevantes"

  # Job que siempre se ejecuta para branches principales
  required-api-tests:
    name: 🚀 Tests E2E (Obligatorios)
    needs: api-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: ✅ Tests obligatorios completados
      run: echo "Tests E2E obligatorios completados para branch principal"

  # Resumen final
  api-tests-summary:
    name: 📋 Resumen de Tests E2E
    runs-on: ubuntu-latest
    needs: [api-tests]
    if: always()
    
    steps:
    - name: 📊 Resumen final
      run: |
        echo "## 📋 Resumen de Tests E2E de API"
        echo "**Estado**: ${{ needs.api-tests.result }}"
        echo "**Trigger**: ${{ github.event_name }}"
        echo "**Branch**: ${{ github.ref_name }}"
        
        if [ "${{ needs.api-tests.result }}" == "success" ]; then
          echo "✅ Todos los tests E2E pasaron correctamente"
          exit 0
        else
          echo "❌ Algunos tests E2E fallaron"
          exit 1
        fi 