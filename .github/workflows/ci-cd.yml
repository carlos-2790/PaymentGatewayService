name: CI/CD Pipeline

on:
  pull_request:
    branches: [ develop ]
    types: [ opened, synchronize, reopened ]
  push:
    branches: [ develop, main ]

# Permisos necesarios para deployment y comentarios en PRs
permissions:
  contents: read          # Leer el código del repositorio
  issues: write          # Escribir comentarios en issues (si es necesario)
  pull-requests: write   # Escribir comentarios en pull requests (si es necesario)
  deployments: write     # Para deployments (si es necesario)

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Xmx2048m'

jobs:
  # Job de validación de código
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔧 Validar formato de código
      run: echo "Code formatting check disabled"
      continue-on-error: true
    
    - name: 🔍 Análisis estático con SpotBugs
      run: mvn compile spotbugs:check
      continue-on-error: true
    
    - name: 📊 SonarCloud Scan
      if: github.event_name == 'pull_request'
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      continue-on-error: true

  # Job de compilación y tests
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_DB: payment_gateway_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔧 Compilar proyecto
      run: mvn clean compile -DskipTests
    
    - name: 🧪 Ejecutar tests unitarios
      run: mvn test -Dtest="*Test" -Dsurefire.failIfNoSpecifiedTests=false
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/payment_gateway_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
    
    - name: 🔗 Ejecutar tests de integración
      run: mvn test -Dtest="*IT" -DfailIfNoTests=false
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/payment_gateway_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password
        SPRING_DATA_REDIS_HOST: localhost
        SPRING_DATA_REDIS_PORT: 6379
    
    - name: 🏛️ Ejecutar tests de arquitectura
      run: mvn test -Dtest="*ArchTest" -DfailIfNoTests=false
    
    - name: 📊 Generar reporte de cobertura
      run: mvn jacoco:report
    
    - name: 📈 Subir cobertura a Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true
    
    - name: 📦 Crear artefacto JAR
      run: mvn package -DskipTests
    
    - name: 💾 Guardar artefactos
      uses: actions/upload-artifact@v4
      with:
        name: payment-gateway-jar
        path: target/*.jar
        retention-days: 7

  # Job de tests de seguridad
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: ☕ Configurar Java ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: 🔍 OWASP Dependency Check
      run: mvn org.owasp:dependency-check-maven:check
      continue-on-error: true
    
    - name: 🛡️ Snyk Security Scan
      uses: snyk/actions/maven@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true

  # Job de construcción de imagen Docker
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐳 Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 📦 Descargar artefactos
      uses: actions/download-artifact@v4
      with:
        name: payment-gateway-jar
        path: target/
    
    - name: 🏗️ Construir imagen Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: payment-gateway:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de comentarios en PR
  pr-comment:
    name: 💬 PR Status Comment
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan, docker-build]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: 📝 Comentar estado del PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
          });
          
          const jobs = [
            { name: 'Code Quality', status: '${{ needs.code-quality.result }}' },
            { name: 'Build & Test', status: '${{ needs.build-and-test.result }}' },
            { name: 'Security Scan', status: '${{ needs.security-scan.result }}' },
            { name: 'Docker Build', status: '${{ needs.docker-build.result }}' }
          ];
          
          const statusEmoji = {
            'success': '✅',
            'failure': '❌',
            'cancelled': '⏹️',
            'skipped': '⏭️'
          };
          
          let comment = `## 🚀 CI/CD Pipeline Status\n\n`;
          comment += `**PR:** ${pr.title}\n`;
          comment += `**Branch:** \`${pr.head.ref}\` → \`${pr.base.ref}\`\n\n`;
          comment += `### 📊 Jobs Status:\n\n`;
          
          jobs.forEach(job => {
            const emoji = statusEmoji[job.status] || '⚪';
            comment += `${emoji} **${job.name}**: ${job.status}\n`;
          });
          
          comment += `\n### 📋 Next Steps:\n`;
          comment += `- ✅ Todos los checks deben estar en verde\n`;
          comment += `- 👀 Revisar código y tests\n`;
          comment += `- 🔍 Validar que no hay vulnerabilidades críticas\n`;
          comment += `- ✨ ¡Listo para merge cuando esté aprobado!\n\n`;
          comment += `---\n`;
          comment += `🤖 *Comentario automático del CI/CD Pipeline*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Job de notificación de éxito
  success-notification:
    name: 🎉 Success Notification
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, security-scan, docker-build]
    if: success() && github.event_name == 'pull_request'
    
    steps:
    - name: 🎊 PR Ready for Review
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.pulls.requestReviewers({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            reviewers: ['${{ github.repository_owner }}']
          });
          
          github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['✅ CI-Passed', '👀 Ready-for-Review']
          });