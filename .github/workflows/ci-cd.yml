name: CI/CD Pipeline - Payment Gateway Service

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  JAVA_VERSION: '21'
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository -Xmx1024m'

jobs:
  # 🧪 Job 1: Tests Unitarios
  test:
    name: 🧪 Tests Unitarios
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Configurar JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache dependencias Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🔍 Verificar estructura del proyecto
      run: |
        echo "📂 Estructura del proyecto:"
        ls -la
        echo "📂 Contenido de src:"
        ls -la src/ || echo "❌ Directorio src no encontrado"
        
    - name: ✅ Ejecutar tests unitarios
      run: mvn clean test -B
      
    - name: 📊 Generar reporte de cobertura
      run: mvn jacoco:report -B
      continue-on-error: true
      
    - name: 📈 Subir resultados de tests
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          target/surefire-reports/
          target/site/jacoco/
        retention-days: 30

  # 🔍 Job 2: Análisis de Calidad
  code-quality:
    name: 🔍 Análisis de Calidad
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
        
    - name: ☕ Configurar JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache dependencias Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🏗️ Compilar proyecto
      run: mvn clean compile -B
      
    - name: 🔍 Análisis estático de código
      run: mvn verify -B
      continue-on-error: true

  # 🏗️ Job 3: Build y Empaquetado
  build:
    name: 🏗️ Build y Empaquetado
    runs-on: ubuntu-latest
    needs: [test, code-quality]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: ☕ Configurar JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: 📦 Cache dependencias Maven
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: 🏗️ Compilar y empaquetar
      run: mvn clean package -DskipTests -B
      
    - name: 📦 Subir artefactos
      uses: actions/upload-artifact@v4
      with:
        name: payment-gateway-jar-${{ github.run_number }}
        path: target/*.jar
        retention-days: 30
        
    - name: 🏷️ Crear tag de versión
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "🏷️ Versión detectada: $VERSION"

  # 🚀 Job 4: Despliegue
  deploy:
    name: 🚀 Despliegue
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    # environment: production  # Comentado hasta configurar environments en GitHub
    
    steps:
    - name: 📥 Descargar artefactos
      uses: actions/download-artifact@v4
      with:
        name: payment-gateway-jar-${{ github.run_number }}
        
    - name: 🚀 Simular despliegue
      run: |
        echo "🎉 Iniciando despliegue de Payment Gateway Service..."
        echo "📦 Archivos disponibles para despliegue:"
        ls -la *.jar
        echo "✅ Despliegue completado exitosamente!"
        echo "🌐 Aplicación disponible en: https://payment-gateway.ejemplo.com"

  # 📢 Job 5: Notificaciones
  notify:
    name: 📢 Notificaciones
    runs-on: ubuntu-latest
    needs: [test, code-quality, build, deploy]
    if: always()
    
    steps:
    - name: 📢 Notificar resultado del pipeline
      run: |
        echo "📊 Resumen del Pipeline:"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🔍 Calidad: ${{ needs.code-quality.result }}"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🚀 Deploy: ${{ needs.deploy.result }}"
        
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ Pipeline ejecutado exitosamente!"
        else
          echo "❌ Pipeline falló. Revisar logs de tests."
          exit 1
        fi